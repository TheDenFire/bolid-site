package com.domain.controller;

import com.domain.controller.handlers.MainHandler;
import com.domain.controller.handlers.QuestionHandler;
import com.domain.controller.handlers.RatingHandler;
import com.domain.models.User;
import com.domain.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.time.LocalDateTime;
import java.util.concurrent.CompletableFuture;

public class UpdateDispatcher {

    private static final UserService userService = new UserService();

    private static final MainHandler mainHandler = new MainHandler();

    private static final QuestionHandler questionHandler = new QuestionHandler();
    private static final RatingHandler ratingHandler = new RatingHandler();

    private static final Logger log = LoggerFactory.getLogger(UpdateDispatcher.class);


    public BotApiMethod<?> dispatch(Update update) {
        try {
            if (update.hasMessage()) {
                Long userId =  update.getMessage().getFrom().getId();
                String text = update.getMessage().getText();
                if (text != null) {
                    text = text.trim();

                    if (text.equalsIgnoreCase("/start")) {
                        User user = new User(update.getMessage().getChatId(),update.getMessage().getFrom().getUserName(), LocalDateTime.now());
                        userService.save(user);
                        return new SendMessage(userId.toString(),"""
                            üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *QuizBot*!
                    
                            –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.  
                            –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª—ã, –∞ –≤ –∫–æ–Ω—Ü–µ –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–µ–±—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
                    
                            üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
                            /quiz ‚Äî –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É  
                            /rating ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤  
                            /help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                    
                            –£–¥–∞—á–∏! üçÄ
                            """);
                    } else if (text.equalsIgnoreCase("/quiz")) {
                        return questionHandler.handle(update);
                    } else if (text.equalsIgnoreCase("/rating")) {
                        return ratingHandler.handle(update);
                    } else if (text.equalsIgnoreCase("/help")) {
                        return new SendMessage(userId.toString(),
                                """
                                ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
                        
                                /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è  
                                /quiz ‚Äî –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤  
                                /rating ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –±–∞–ª–ª–∞–º  
                        
                                _–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!_
                                """);
                    }
                    else{
                        return new SendMessage(userId.toString(),"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n–í–≤–µ–¥–∏—Ç–µ /help —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏");
                    }

                }
            } else if (update.hasCallbackQuery()) {
                String data = update.getCallbackQuery().getData();

                if (data != null) {
                    if (data.startsWith("start_quiz")) {
                        return questionHandler.handle(update);
                    }
                    else if (data.startsWith("answer")) {
                        return questionHandler.handle(update);
                    }else if (data.startsWith("next")) {
                        return questionHandler.handle(update);
                    }
                }
                return null;
            }
            return new SendMessage("0", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        } catch(Exception e){
            String chatId = "0";
            if (update.hasMessage()) {
                chatId = update.getMessage().getChatId().toString();
            } else if (update.hasCallbackQuery()) {
                chatId = update.getCallbackQuery().getMessage().getChatId().toString();
            }
            log.info(e.getMessage());
            return new SendMessage(chatId, "–û—à–∏–±–∫–∞:");
        }

    }
}
